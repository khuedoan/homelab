nextcloud:
  image:
    repository: nextcloud
    flavor: apache
    tag:
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      external-dns.alpha.kubernetes.io/target: "homelab-tunnel.meyeringh.org"
      external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/server-snippet: |-
        server_tokens off;
        proxy_hide_header X-Powered-By;
        rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
        rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
        rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
        rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
        location = /.well-known/carddav {
          return 301 $scheme://$host/remote.php/dav;
        }
        location = /.well-known/caldav {
          return 301 $scheme://$host/remote.php/dav;
        }
        location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
        }
        location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
          deny all;
        }
        location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
          deny all;
        }
    hosts:
      - host: &frontend_host cloud.meyeringh.org
        paths:
          - path: /
            pathType: Prefix
            service:
              name: main
              port: http
    tls:
      - secretName: nextcloud-tls-certificate
        hosts:
          - *frontend_host
  
    nextcloud:
      host: cloud.meyeringh.org
      trustedDomains:
        - 'cloud.meyeringh.org'
      defaultConfigs:
        imaginary.config.php: true
      existingSecret:
        enabled: true
        secretName: nextcloud
        usernameKey: nextcloud-username
        passwordKey: nextcloud-password
  
  nextcloud:
    host: cloud.meyeringh.org
    existingSecret:
      enabled: true
      secretName: nextcloud
      usernameKey: nextcloud-username
      passwordKey: nextcloud-password
    datadir: /var/www/html/data
  
  internalDatabase:
    enabled: false
  
  externalDatabase:
    enabled: true
    type: postgresql
    existingSecret:
      enabled: true
      secretName: nextcloud-postgresql
      passwordKey: password

  persistence:
    # Nextcloud Data (/var/www/html)
    enabled: false
    annotations: {}
    ## nextcloud data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
  
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:
  
    accessMode: ReadWriteOnce
    size: 8Gi
  
    ## Use an additional pvc for the data directory rather than a subpath of the default PVC
    ## Useful to store data on a different storageClass (e.g. on slower disks)
    nextcloudData:
      enabled: false
      subPath:
      annotations: {}
      # storageClass: "-"
      # existingClaim:
      accessMode: ReadWriteOnce
      size: 8Gi
  
  resources:
    limits:
     cpu: 100m
     memory: 1Gi
    requests:
     cpu: 100m
     memory: 1Gi

postgresql:
  enabled: true
  global:
    postgresql:
      auth:
        existingSecret: nextcloud-postgresql
        secretKeys:
          adminPasswordKey: postgres-password
          userPasswordKey: password

#redis:
#  enabled: false
#  auth:
#    enabled: true
#    password: 'changeme'
#    # name of an existing secret with RedisÂ® credentials (instead of auth.password), must be created ahead of time
#    existingSecret: ""
#    # Password key to be retrieved from existing secret
#    existingSecretPasswordKey: ""
#  # Since Redis is used for caching only, you might want to use a storageClass with different reclaim policy and backup settings
#  global:
#    storageClass: ""
#  master:
#    persistence:
#      enabled: true
#  replica:
#    persistence:
#      enabled: true
#
###
### Collabora chart configuration
### for more options see https://github.com/CollaboraOnline/online/tree/master/kubernetes/helm/collabora-online
###
#collabora:
#  enabled: false
#
#  autoscaling:
#    # enable autocaling, please check collabora README.md first
#    enabled: false
#
#  collabora:
#    ## HTTPS nextcloud domain, if needed
#    aliasgroups: []
#    #   - host: "https://nextcloud.domain:443"
#
#    # set extra parameters for collabora
#    # you may need to add --o:ssl.termination=true
#    extra_params: --o:ssl.enable=false
#
#    ## Specify server_name when the hostname is not reachable directly for
#    # example behind reverse-proxy. example: collabora.domain
#    server_name: null
#
#    existingSecret:
#      # set to true to to get collabora admin credentials from an existin secret
#      # if set, ignores collabora.collabora.username and password
#      enabled: false
#      # name of existing Kubernetes Secret with collboara admin credentials
#      secretName: ""
#      usernameKey: "username"
#      passwordKey: "password"
#
#    # setup admin login credentials, these are ignored if
#    # collabora.collabora.existingSecret.enabled=true
#    password: examplepass
#    username: admin
#
#  # setup ingress
#  ingress:
#    # enable ingress for collabora online
#    enabled: false
#    className: ""
#    # please check collabora values.yaml for nginx/haproxy annotations examples
#    annotations: {}
#    hosts:
#      - host: chart-example.local
#        paths:
#        - path: /
#          pathType: ImplementationSpecific
#    tls: []
#    #  - secretName: collabora-ingress-tls
#    #    hosts:
#    #      - collabora.domain
#
#  # see collabora helm README.md for recommended values
#  resources: {}
